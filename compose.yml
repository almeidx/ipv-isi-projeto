x-rabbitmq-env: &rabbitmq-env
  RABBITMQ_HOST: rabbitmq
  RABBITMQ_USER: user
  RABBITMQ_PASS: password
  PYTHONUNBUFFERED: 1

x-postgres-env: &postgres-env
  POSTGRES_HOST: postgres
  POSTGRES_USER: user
  POSTGRES_PASS: password
  POSTGRES_DB: db
  PYTHONUNBUFFERED: 1

x-sensor: &sensor
  environment:
    <<: *rabbitmq-env
  depends_on:
    - receiver
  deploy:
    resources:
      limits:
        cpus: '0.01'
        memory: 30M

services:
  sensor_temp_1:
    <<: *sensor
    container_name: sensor_temp_1
    build:
      context: sensor
      dockerfile: Dockerfile
      args:
        SENSOR_ID: 1
        SENSOR_TYPE: temperature

  sensor_temp_2:
    <<: *sensor
    container_name: sensor_temp_2
    build:
      context: sensor
      dockerfile: Dockerfile
      args:
        SENSOR_ID: 2
        SENSOR_TYPE: temperature

  sensor_gas_1:
    <<: *sensor
    container_name: sensor_gas_1
    build:
      context: sensor
      dockerfile: Dockerfile
      args:
        SENSOR_ID: 3
        SENSOR_TYPE: gas

  sensor_gas_2:
    <<: *sensor
    container_name: sensor_gas_2
    build:
      context: sensor
      dockerfile: Dockerfile
      args:
        SENSOR_ID: 4
        SENSOR_TYPE: gas

  sensor_humidity_1:
    <<: *sensor
    container_name: sensor_humidity_1
    build:
      context: sensor
      dockerfile: Dockerfile
      args:
        SENSOR_ID: 5
        SENSOR_TYPE: humidity

  sensor_humidity_2:
    <<: *sensor
    container_name: sensor_humidity_2
    build:
      context: sensor
      dockerfile: Dockerfile
      args:
        SENSOR_ID: 6
        SENSOR_TYPE: humidity

  receiver:
    container_name: receiver
    build:
      context: receiver
      dockerfile: Dockerfile
    environment:
      <<:
        - *rabbitmq-env
        - *postgres-env
    depends_on:
      rabbitmq:
        condition: service_healthy
      postgres:
        condition: service_healthy
    deploy:
      resources:
        limits:
          cpus: '0.1'
          memory: 50M

  grapher:
    container_name: grapher
    build:
      context: grapher
      dockerfile: Dockerfile
    environment:
      <<: *postgres-env
    depends_on:
      postgres:
        condition: service_healthy
    ports:
      - 8501:8501
    volumes:
      - ./grapher/graphs:/app/graphs
    deploy:
      resources:
        limits:
          cpus: '0.1'
          memory: 100M

  rabbitmq:
    image: rabbitmq:4-management
    container_name: rabbitmq
    ports:
      - 5672:5672
      - 15672:15672
    environment:
      RABBITMQ_DEFAULT_USER: user
      RABBITMQ_DEFAULT_PASS: password
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq
      - rabbitmq-log:/var/log/rabbitmq
      - rabbitmq-conf:/etc/rabbitmq
    healthcheck:
      test: rabbitmqctl node_health_check
      interval: 30s
      timeout: 30s
      retries: 3
      start_period: 5s

  postgres:
    image: postgres:17-alpine
    container_name: postgres
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: db
    ports:
      - 5432:5432
    volumes:
      - postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: pg_isready -U user
      interval: 30s
      timeout: 30s
      retries: 3
      start_period: 10s

volumes:
  rabbitmq-data:
  rabbitmq-log:
  rabbitmq-conf:
  postgres-data:
